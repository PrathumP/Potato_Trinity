"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12ubbgXyimQ3cxRhotvRVnCEkJqma3f2b
"""

import torch
import os
import torchvision
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import torch.nn as nn
from PIL import Image
import torch.nn.functional as F
from torchvision.datasets import ImageFolder
from torchvision.datasets import DatasetFolder
import torchvision.transforms as transforms
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor
from torchvision.utils import make_grid
from torch.utils.data.dataloader import DataLoader
from torch.utils.data import random_split
from torch.utils.data import Dataset, DataLoader

# device = torch.device("cpu")

# %matplotlib inline
# class Potato(nn.Module):
#     def training_step(self, batch):
#         images, labels = batch
#         out = self(images)                  # Generate predictions
#         loss = F.cross_entropy(out, labels) # Calculate loss
#         return loss

#     def validation_step(self, batch):
#         images, labels = batch
#         out = self(images)                    # Generate predictions for each batch
#         loss = F.cross_entropy(out, labels)   # Calculate loss for each batch
#         acc = accuracy(out, labels)           # Calculate accuracy for each batch
#         return {'val_loss': loss.detach(), 'val_acc': acc}

#     def validation_epoch_end(self, outputs):
#         batch_losses = [x['val_loss'] for x in outputs]
#         epoch_loss = torch.stack(batch_losses).mean()   # Combine losses
#         batch_accs = [x['val_acc'] for x in outputs]
#         epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies
#         return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}

#     def epoch_end(self, epoch, result):
#         print("Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}".format(
#             epoch, result['train_loss'], result['val_loss'], result['val_acc']))

# def accuracy(outputs, labels):
#     _, preds = torch.max(outputs, dim=1)
#     return torch.tensor(torch.sum(preds == labels).item() / len(preds))

# def conv_block(in_channels, out_channels, pool=False):
#     layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),
#               nn.BatchNorm2d(out_channels),
#               nn.ReLU(inplace=True)]
#     if pool: layers.append(nn.MaxPool2d(2))
#     return nn.Sequential(*layers)

# class ResNet9(Potato):
#     def __init__(self, in_channels, num_classes):
#         super().__init__()

#         self.conv1 = conv_block(in_channels, 64)  #64 x 256 x 256
#         self.conv2 = conv_block(64, 128, pool=True) #128 x 128 x 128
#         self.res1 = nn.Sequential(conv_block(128, 128), conv_block(128, 128)) #128 x 128 x 128

#         self.conv3 = conv_block(128, 256, pool=True)
#         self.conv4 = conv_block(256, 512, pool=True)
#         self.res2 = nn.Sequential(conv_block(512, 512), conv_block(512, 512))  #512 x 32 x 32
#         self.classifier = nn.Sequential(nn.MaxPool2d(4),                       #512 x 8 x 8
#                                         nn.Flatten(),
#                                         nn.Dropout(0.2),
#                                         nn.Linear(512*8*8, num_classes))

#     def forward(self, xb):
#         out = self.conv1(xb)
#         out = self.conv2(out)
#         out = self.res1(out) + out
#         out = self.conv3(out)
#         out = self.conv4(out)
#         out = self.res2(out) + out
#         out = self.classifier(out)
#         return out
# def get_default_device():             #For GPU
#     """Pick GPU if available, else CPU"""
#     if torch.cuda.is_available():
#         return torch.device('cuda')
#     else:
#         return torch.device('cpu')

# def to_device(data, device):
#     """Move tensor(s) to chosen device"""
#     if isinstance(data, (list,tuple)):
#         return [to_device(x, device) for x in data]
#     return data.to(device, non_blocking=True)

# class DeviceDataLoader():
#     """Wrap a dataloader to move data to a device"""
#     def __init__(self, dl, device):
#         self.dl = dl
#         self.device = device

#     def __iter__(self):
#         """Yield a batch of data after moving it to device"""
#         for b in self.dl:
#             yield to_device(b, self.device)

#     def __len__(self):
#         """Number of batches"""
#         return len(self.dl)
# @torch.no_grad()
# def evaluate(model, val_loader):
#     model.eval()
#     outputs = [model.validation_step(batch) for batch in val_loader]
#     return model.validation_epoch_end(outputs)

# def get_lr(optimizer):
#     for param_group in optimizer.param_groups:
#         return param_group['lr']

# def fit_one_cycle(epochs, max_lr, model, train_loader, val_loader,
#                    grad_clip=None, opt_func=torch.optim.SGD):
#     torch.cuda.empty_cache()
#     history = []

#     # Set up cutom optimizer with weight decay
#     optimizer = opt_func(model.parameters(), max_lr)#, weight_decay=weight_decay)
#     # Set up one-cycle learning rate scheduler
#     sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
#                                                 steps_per_epoch=len(train_loader))

#     for epoch in range(epochs):
#         # Training Phase
#         model.train()
#         train_losses = []
#         lrs = []
#         for batch in train_loader:
#             loss = model.training_step(batch)
#             train_losses.append(loss)
#             loss.backward()

#             # # Gradient clipping
#             # if grad_clip:
#             #     nn.utils.clip_grad_value_(model.parameters(), grad_clip)

#             optimizer.step()
#             optimizer.zero_grad()

#             # Record & update learning rate
#             lrs.append(get_lr(optimizer))
#             sched.step()

#         # Validation phase
#         result = evaluate(model, val_loader)
#         result['train_loss'] = torch.stack(train_losses).mean().item()
#         result['lrs'] = lrs
#         model.epoch_end(epoch, result)
#         history.append(result)
#     return history

class Potato(nn.Module):
    def training_step(self, batch):
        images, labels = batch
        out = self(images)                  # Generate predictions
        loss = F.cross_entropy(out, labels) # Calculate loss
        return loss

    def validation_step(self, batch):
        images, labels = batch
        out = self(images)                    # Generate predictions for each batch
        loss = F.cross_entropy(out, labels)   # Calculate loss for each batch
        acc = accuracy(out, labels)           # Calculate accuracy for each batch
        return {'val_loss': loss.detach(), 'val_acc': acc}

    def validation_epoch_end(self, outputs):
        batch_losses = [x['val_loss'] for x in outputs]
        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses
        batch_accs = [x['val_acc'] for x in outputs]
        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies
        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}

    def epoch_end(self, epoch, result):
        print("Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}".format(
            epoch, result['train_loss'], result['val_loss'], result['val_acc']))

def accuracy(outputs, labels):
    _, preds = torch.max(outputs, dim=1)
    return torch.tensor(torch.sum(preds == labels).item() / len(preds))

def conv_block(in_channels, out_channels, pool=False):
    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),
              nn.BatchNorm2d(out_channels),
              nn.ReLU(inplace=True)]
    if pool: layers.append(nn.MaxPool2d(2))
    return nn.Sequential(*layers)

# import torch
# import torch.nn as nn

# Step 1: Define the architecture of the model
class ResNet9(Potato):
    def __init__(self, in_channels, num_classes):
        super().__init__()

        self.conv1 = conv_block(in_channels, 64)  #64 x 256 x 256
        self.conv2 = conv_block(64, 128, pool=True) #128 x 128 x 128
        self.res1 = nn.Sequential(conv_block(128, 128), conv_block(128, 128)) #128 x 128 x 128

        self.conv3 = conv_block(128, 256, pool=True)
        self.conv4 = conv_block(256, 512, pool=True)
        self.res2 = nn.Sequential(conv_block(512, 512), conv_block(512, 512))  #512 x 32 x 32
        self.classifier = nn.Sequential(nn.MaxPool2d(4),                       #512 x 8 x 8
                                        nn.Flatten(),
                                        nn.Dropout(0.2),
                                        nn.Linear(512*8*8, num_classes))

    def forward(self, xb):
        out = self.conv1(xb)
        out = self.conv2(out)
        out = self.res1(out) + out
        out = self.conv3(out)
        out = self.conv4(out)
        out = self.res2(out) + out
        out = self.classifier(out)
        return out

# Step 3: Load the saved weights into the model

# # Step 4: Define the forward pass for a given input
# input_data = torch.randn(1, 10)  # Example input data
# output = model(input_data)
# print(output)



from PIL import Image

def predict(img_path):
    img = Image.open(img_path)
    # Apply transformations
    transform = transforms.Compose([
        transforms.Resize((256, 256)),  # Resize to the input size expected by the model
        transforms.ToTensor(),           # Convert PIL image to PyTorch tensor
        # If the model was trained with normalization, apply it here
        # transforms.Normalize(mean=[...], std=[...])
    ])
    img = transform(img).unsqueeze(0)
    model = ResNet9(3, 3)
    if torch.cuda.is_available():
        img = img.cuda()
        device = torch.device('cuda')
        model.load_state_dict(torch.load('PotatoWeights.pth', map_location=device))
        model.to(device)
    else:
        device = torch.device('cpu')
        model.load_state_dict(torch.load('PotatoWeights.pth', map_location=device))
    label_map = {
        0: 'Potato__healthy',
        1: 'Early_blight',
        2: 'Late_blight'
    }
    # Load the image
    # Set model to evaluation mode
    model.eval()
    # Get model predictions
    with torch.no_grad():
        outputs = model(img)
    # Apply softmax to get probabilities
    # print(outputs)
    probabilities = F.softmax(outputs, dim=1)[0]
    # Map probabilities to class labels using label mapping
    class_probs = {label_map[i]: probabilities[i].item() for i in range(len(probabilities))}
    return class_probs
